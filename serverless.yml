# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: feriapp # NOTE: update this with your service name

plugins:
  - serverless-plugin-dotenv
  - serverless-plugin-warmup
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
custom:
  warmup:
    default: true
    schedule: 'cron(0/5 8-17 ? * MON-FRI *)'
    prewarm: true
    

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverless-admin
# you can overwrite defaults here
#  stage: dev
  region: eu-west-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource: "*"

functions:
  bridges:
    handler: bridgesHandler.bridges
    vpc:
     securityGroupIds:
      - ${env:SECURITY_GROUP}
     subnetIds:
      - ${env:SUBNET_1}
      - ${env:SUBNET_2}
    events:
      - http:
          path: bridges
          method: get
          cors: true
      - http: 
          path: bridges
          method: get
          cors: 
            origin: '*'
            headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
                - username
        authorizer:
            name: feriapp-user-pool-auth
            arn:  arn:aws:cognito-idp:eu-west-1:647960870003:userpool/eu-west-1_lVSzMqLAa

  getIgMedia:
    handler: igHandler.getIgMedia
    environment:
      IG_CLIENT_ID: ${env:IG_CLIENT_ID}
      IG_APP_SECRET: ${env:IG_APP_SECRET}
      IG_ACCESS_TOKEN: ${env:IG_ACCESS_TOKEN}
      MYSQL_URL: ${env:MYSQL_URL}
    vpc:
      securityGroupIds:
        - ${env:SECURITY_GROUP}
      subnetIds:
        - ${env:SUBNET_1}
        - ${env:SUBNET_2}
    events:
      - http:
          path: getIgMedia
          method: get
          cors: true
      - http: 
          path: getIgMedia
          method: get
          cors: 
            origin: '*'
            headers:
                - Content-Type
                - X-Amz-Date
                - Authorization
                - X-Api-Key
                - X-Amz-Security-Token
                - X-Amz-User-Agent
                - username
        authorizer:
            name: feriapp-user-pool-auth
            arn:  arn:aws:cognito-idp:eu-west-1:647960870003:userpool/eu-west-1_lVSzMqLAa

  updateIgMedia: 
    handler: igHandler.updateIgMedia
    environment:
      IG_CLIENT_ID: ${env:IG_CLIENT_ID}
      IG_APP_SECRET: ${env:IG_APP_SECRET}
      IG_ACCESS_TOKEN: ${env:IG_ACCESS_TOKEN}
      MYSQL_URL: ${env:MYSQL_URL}
    vpc:
      securityGroupIds:
        - ${env:SECURITY_GROUP}
      subnetIds:
        - ${env:SUBNET_1}
        - ${env:SUBNET_2}