# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: feriapp # NOTE: update this with your service name

plugins:
  - serverless-plugin-dotenv
  - serverless-plugin-warmup
  - serverless-reqvalidator-plugin
  - serverless-apigw-binary
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
custom:
  warmup:
    default: true
    schedule: 'cron(0/5 8-17 ? * MON-FRI *)'
    prewarm: true
  apigwBinary:
    types:
      - 'image/jpeg'
      - 'image/jpg'
      - 'image/png'
      - 'image/bmp'

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverless-admin
# you can overwrite defaults here
#  stage: dev
  region: eu-west-1
  apiKeys: 
    - front-end-key
    - android-key
    - ios-key
# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource: "*"

functions:
  bridges:
    handler: handlers/bridgesHandler.bridges
    environment:
      GOOGLE_API_URL: ${env:GOOGLE_API_URL}
      GOOGLE_API_KEY: ${env:GOOGLE_API_KEY}
    events:
      - http: 
          path: bridges
          method: post
          private: true
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          # authorizer:
          #     name: feriapp-user-pool-auth
          #     arn:  arn:aws:cognito-idp:eu-west-1:647960870003:userpool/eu-west-1_kOBL2eakF
  
  getHolidaysByCity:
    handler: handlers/bridgesHandler.getHolidaysByCity
    environment:
      GOOGLE_API_URL: ${env:GOOGLE_API_URL}
      GOOGLE_API_KEY: ${env:GOOGLE_API_KEY}
    events:
      - http: 
          path: getHolidaysByCity
          method: get
          private: true
          reqValidatorName: 'xMyRequestValidator'
          request: 
            parameters:
              querystrings:
                city: true
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          # authorizer:
          #     name: feriapp-user-pool-auth
          #     arn:  arn:aws:cognito-idp:eu-west-1:647960870003:userpool/eu-west-1_kOBL2eakF

  igMedia:
    handler: handlers/igHandler.igMedia
    environment:
      IG_CLIENT_ID: ${env:IG_CLIENT_ID}
      IG_APP_SECRET: ${env:IG_APP_SECRET}
      IG_ACCESS_TOKEN: ${env:IG_ACCESS_TOKEN}
      MYSQL_URL: ${env:MYSQL_URL}
    vpc:
      securityGroupIds:
        - ${env:SECURITY_GROUP}
      subnetIds:
        - ${env:SUBNET_1}
        - ${env:SUBNET_2}
    events:
      - http: 
          path: igMedia
          method: get
          private: true
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          # authorizer:
          #     name: feriapp-user-pool-auth
          #     arn:  arn:aws:cognito-idp:eu-west-1:647960870003:userpool/eu-west-1_kOBL2eakF

  updateIgMedia: 
    handler: handlers/igHandler.updateIgMedia
    warmup:
      enabled: false
    environment:
      IG_CLIENT_ID: ${env:IG_CLIENT_ID}
      IG_APP_SECRET: ${env:IG_APP_SECRET}
      IG_ACCESS_TOKEN: ${env:IG_ACCESS_TOKEN}
      MYSQL_URL: ${env:MYSQL_URL}
    vpc:
      securityGroupIds:
        - ${env:SECURITY_GROUP}
      subnetIds:
        - ${env:SUBNET_1}
        - ${env:SUBNET_2}
  
  flights:
    handler: handlers/flightsHandler.flights
    environment:
      AERODATABOX_API_HOST: ${env:AERODATABOX_API_HOST}
      SKYSCANNER_API_HOST: ${env:SKYSCANNER_API_HOST}
      RAPID_API_KEY: ${env:RAPID_API_KEY}
      GOOGLE_API_URL: ${env:GOOGLE_API_URL}
      GOOGLE_API_KEY: ${env:GOOGLE_API_KEY}
      MYSQL_URL: ${env:MYSQL_URL}
    vpc:
      securityGroupIds:
        - ${env:SECURITY_GROUP}
      subnetIds:
        - ${env:SUBNET_1}
        - ${env:SUBNET_2}
    events:
      - http: 
          path: flights
          method: get
          private: true
          reqValidatorName: 'xMyRequestValidator'
          request: 
            parameters:
              querystrings:
                originCity: true
                outboundDate: true
                inboundDate: true
                currency: true
                locale: true
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          # authorizer:
          #     name: feriapp-user-pool-auth
          #     arn:  arn:aws:cognito-idp:eu-west-1:647960870003:userpool/eu-west-1_kOBL2eakF
  
  betaSubscribe:
    handler: handlers/betaSubscriptionHandler.betaSubscribe
    environment:
      MYSQL_URL: ${env:MYSQL_URL}
    vpc:
      securityGroupIds:
        - ${env:SECURITY_GROUP}
      subnetIds:
        - ${env:SUBNET_1}
        - ${env:SUBNET_2}
    events:
      - http: 
          path: betaSubscribe
          method: post
          private: true
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
  cityPhoto:
    handler: handlers/flightsHandler.cityPhoto
    environment:
      GOOGLE_API_URL: ${env:GOOGLE_API_URL}
      GOOGLE_API_KEY: ${env:GOOGLE_API_KEY}
    events:
      - http: 
          path: cityPhoto
          method: get
          private: true
          contentHandling: CONVERT_TO_BINARY
          reqValidatorName: 'xMyRequestValidator'
          request: 
            parameters:
              querystrings:
                city: true
          cors: 
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
          # authorizer:
          #     name: feriapp-user-pool-auth
          #     arn:  arn:aws:cognito-idp:eu-west-1:647960870003:userpool/eu-west-1_kOBL2eakF              
resources:
  Resources:
    xMyRequestValidator:  
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'querystring-parameters-validator'
        RestApiId: 
          Ref: ApiGatewayRestApi
        ValidateRequestParameters: true