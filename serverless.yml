# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: feriapp # NOTE: update this with your service name

plugins:
  - serverless-plugin-dotenv
  - serverless-plugin-warmup
# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
custom:
  warmup:
    default: true
    schedule: 'cron(0/5 8-17 ? * MON-FRI *)'
    prewarm: true
    

provider:
  name: aws
  runtime: nodejs12.x
  profile: serverless-admin
# you can overwrite defaults here
#  stage: dev
  region: eu-west-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'lambda:InvokeFunction'
      Resource: "*"
#  iamRoleStatements:
#    - Effect: "Allow"
#      Action:
#        - "s3:ListBucket"
#      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#    - Effect: "Allow"
#      Action:
#        - "s3:PutObject"
#      Resource:
#        Fn::Join:
#          - ""
#          - - "arn:aws:s3:::"
#            - "Ref" : "ServerlessDeploymentBucket"
#            - "/*"

# you can define service wide environment variables here
environment:

# you can add packaging information here
# package:
#   include:
#     - dbOperation.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**


functions:
  bridges:
    handler: handler.bridges
    vpc:
     securityGroupIds:
      - ${env:SECURITY_GROUP}
     subnetIds:
      - ${env:SUBNET_1}
      - ${env:SUBNET_2}
    events:
      - http:
          path: bridges
          method: get
          cors: true

#in this method i'm defining a custom set of accepted header and also the cognito authorizer   
      # - http: 
          # path: visit
          # method: get
          # cors: 
            # origin: '*'
            # headers:
                # - Content-Type
                # - X-Amz-Date
                # - Authorization
                # - X-Api-Key
                # - X-Amz-Security-Token
                # - X-Amz-User-Agent
                # - username
        # authorizer:
            # name: ora-user-pool-auth
            # arn: arn:aws:cognito-idp:eu-central-1:421949381721:userpool/eu-central-1_NIuMMls8W
            
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"


# resources:
#   Resources:
#     ApiGatewayAuthorizer: 
#       Type: AWS::ApiGateway::Authorizer
#       Properties: 
#         AuthorizerResultTtlInSeconds: 300
#         IdentitySource: method.request.header.Authorization
#         Name: Cognito
#         RestApiId: 
#           Ref: hv74w9kez3
#         Type: COGNITO_USER_POOLS
#         ProviderARNs: 
#           - arn:aws:cognito-idp:eu-central-1:421949381721:userpool/eu-central-1_NIuMMls8W